-- import qualified IPPrint
-- import qualified Language.Haskell.HsColour as HsColour
-- import qualified Language.Haskell.HsColour.Colourise as HsColour
-- import qualified Language.Haskell.HsColour.Output as HsColour
-- import Data.Encoding
-- import Data.Encoding.UTF8
-- import Data.List
-- import Data.Char

-- import Text.ParserCombinators.ReadP
-- import Text.Read.Lex

-- let myColourPrefs = HsColour.defaultColourPrefs { HsColour.conid = [HsColour.Foreground HsColour.Yellow, HsColour.Bold], HsColour.conop = [HsColour.Foreground HsColour.Yellow], HsColour.string = [HsColour.Foreground HsColour.Green], HsColour.char = [HsColour.Foreground HsColour.Cyan], HsColour.number = [HsColour.Foreground HsColour.Red, HsColour.Bold], HsColour.layout = [HsColour.Foreground HsColour.White], HsColour.keyglyph = [HsColour.Foreground HsColour.White] }

-- :{
-- let strParser :: ReadP String
--     strParser = do
--       str <- many (readS_to_P readLitChar)
--       eof
--       return str
-- :}
--
-- :{
-- let prettyPrint :: Show a => a -> IO ()
--     prettyPrint = putStrLn . fst . head . (readP_to_S strParser) . (HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . IPPrint.pshow)
-- :}
-- :seti -XNoMonomorphismRestriction
-- :seti -interactive-print=prettyPrint
:set prompt "\ESC[32mÎ»:\ESC[m "
